/*
	Generated by Entice Designer
	Entice Designer written by Christopher E. Miller
	www.dprogramming.com/entice.php
*/

import dfl.all, std.string, std.file, std.c.windows.windows, std.conv, jpg, imageprocessor, std.algorithm, std.array;
version(verbose) import std.stdio;

class FileItem
{
	this(string fname)
	{
		fullname = fname;
		auto i = fname.lastIndexOf('\\');
		name = fname[i+1..$];
	}

	string toString() const
	{
		return name;
	}

	string fullname, name;
}

class MainForm : dfl.form.Form
{
	// Do not modify or move this block of variables.
	//~Entice Designer variables begin here.
	dfl.button.Button btnBrowse;
	dfl.button.Button btnSave;
	dfl.button.Button btnZoom;
	dfl.textbox.TextBox txtOutFile;
	dfl.label.Label label1;
	dfl.label.Label label2;
	dfl.textbox.TextBox txtWidth;
	dfl.label.Label label3;
	dfl.textbox.TextBox txtHeight;
	dfl.listbox.ListBox lbxFiles;
	dfl.picturebox.PictureBox picBox;
	//~Entice Designer variables end here.	
	
	this()
	{		
		imgProc = new ImageProcessor(&onGotThumb);
		initializeMyForm();		
		//@  Other MyForm initialization code here.		
	}	
	
	private void initializeMyForm()
	{
		// Do not manually modify this function.
		//~Entice Designer 0.8.5.02 code begins here.
		//~DFL Form
		text = "blogsort";
		clientSize = dfl.all.Size(1300, 720);
		//~DFL dfl.button.Button=btnBrowse
		btnBrowse = new dfl.button.Button();
		btnBrowse.name = "btnBrowse";
		btnBrowse.text = "Browse";
		btnBrowse.bounds = dfl.all.Rect(8, 8, 64, 24);
		btnBrowse.parent = this;
		//~DFL dfl.button.Button=btnSave
		btnSave = new dfl.button.Button();
		btnSave.name = "btnSave";
		btnSave.text = "Save";
		btnSave.bounds = dfl.all.Rect(700, 8, 64, 24);
		btnSave.parent = this;
		//~DFL dfl.button.Button=btnZoom
		btnZoom = new dfl.button.Button();
		btnZoom.name = "btnZoom";
		btnZoom.text = "Zoom";
		btnZoom.bounds = dfl.all.Rect(800, 8, 64, 24);
		btnZoom.parent = this;
		//~DFL dfl.textbox.TextBox=txtOutFile
		txtOutFile = new dfl.textbox.TextBox();
		txtOutFile.name = "txtOutFile";
		txtOutFile.text = "e:\\zhzm\\out01.jpg";
		txtOutFile.bounds = dfl.all.Rect(128, 8, 280, 24);
		txtOutFile.parent = this;
		//~DFL dfl.label.Label=label1
		label1 = new dfl.label.Label();
		label1.name = "label1";
		label1.text = "Out:";
		label1.textAlign = dfl.all.ContentAlignment.MIDDLE_RIGHT;
		label1.bounds = dfl.all.Rect(88, 8, 36, 23);
		label1.parent = this;
		//~DFL dfl.label.Label=label2
		label2 = new dfl.label.Label();
		label2.name = "label2";
		label2.text = "max size:";
		label2.textAlign = dfl.all.ContentAlignment.MIDDLE_RIGHT;
		label2.bounds = dfl.all.Rect(440, 8, 52, 23);
		label2.parent = this;
		//~DFL dfl.textbox.TextBox=txtWidth
		txtWidth = new dfl.textbox.TextBox();
		txtWidth.name = "txtWidth";
		txtWidth.text = "1200";
		txtWidth.bounds = dfl.all.Rect(496, 8, 48, 23);
		txtWidth.parent = this;
		//~DFL dfl.label.Label=label3
		label3 = new dfl.label.Label();
		label3.name = "label3";
		label3.text = "x";
		label3.textAlign = dfl.all.ContentAlignment.MIDDLE_CENTER;
		label3.bounds = dfl.all.Rect(552, 8, 12, 23);
		label3.parent = this;
		//~DFL dfl.textbox.TextBox=txtHeight
		txtHeight = new dfl.textbox.TextBox();
		txtHeight.name = "txtHeight";
		txtHeight.text = "900";
		txtHeight.bounds = dfl.all.Rect(576, 8, 48, 23);
		txtHeight.parent = this;
		//~DFL dfl.listbox.ListBox=lbxFiles
		lbxFiles = new dfl.listbox.ListBox();
		lbxFiles.name = "lbxFiles";
		lbxFiles.bounds = dfl.all.Rect(8, 40, 182, 662);
		lbxFiles.parent = this;
		//~DFL dfl.picturebox.PictureBox=picBox
		picBox = new dfl.picturebox.PictureBox();
		picBox.name = "picBox";
		picBox.bounds = dfl.all.Rect(196, 40, 1100, 670);
		picBox.parent = this;
		//~Entice Designer 0.8.5.02 code ends here.

		btnBrowse.click ~= &onBrowse;
		btnSave.click ~= &onSave;
		btnZoom.click ~= &onZoom;
		picBox.sizeMode = PictureBoxSizeMode.STRETCH_IMAGE;
		lbxFiles.drawMode = DrawMode.OWNER_DRAW_FIXED;
		lbxFiles.drawItem ~= &drawItem;
		lbxFiles.itemHeight = 130;
		lbxFiles.sorted = false;
		lbxFiles.selectedValueChanged ~= &OnSelChanged;
		lbxFiles.keyPress ~= &OnKey;
		this.keyPress ~= &OnKey;
		txtWidth.keyPress ~= &OnOutSizeChange;
		txtHeight.keyPress ~= &OnOutSizeChange;
		txtWidth.lostFocus ~= &OnOutSizeChange;
		txtHeight.lostFocus ~= &OnOutSizeChange;

		closed ~= &OnClose;
	}

	private void onBrowse(Control sender, EventArgs ea)
	{
		auto ofd = new OpenFileDialog;
		ofd.title = "Open Image";
		ofd.filter = "All Image Files|*.bmp;*.ico;*.gif;*.jpg;*.jpeg|Bitmap Files|*.bmp|Icon Files|*.ico|JPEG Files|*.jpg;*.jpeg|All Files|*.*";
		imgProc.Start();
		if(DialogResult.OK == ofd.showDialog())
		{
			auto i = ofd.fileName.lastIndexOf('\\');
			bool[string] picext;
			foreach(ext; ["jpg", "bmp", "gif"]) picext[ext] = true;
			auto files = array(dirEntries(ofd.fileName[0..i], SpanMode.shallow)
								.filter!(name => name.isFile && name[$-3..$].toLower() in picext));
			auto sorted = files.sort();
			auto triple = sorted.trisect(ofd.fileName);
			string prevFile = triple[0].empty ? null : triple[0][$-1];
			string nextFile = triple[2].empty ? null : triple[2][0];

			lbxFiles.beginUpdate();
			lbxFiles.items.clear();
			foreach(name; files) 				
					lbxFiles.items.add(new FileItem(name));			
			lbxFiles.endUpdate();
			foreach(idx; 0..lbxFiles.items.length) {
				FileItem it = cast(FileItem)lbxFiles.items[idx];
				if (it.fullname == ofd.fileName) {
					lbxFiles.selectedIndex = idx;
					break;
				}
			}
			showImage( imgProc.FileSelected(prevFile, ofd.fileName, nextFile) );
		}
	}

	void OnSelChanged(ListControl lc, EventArgs ea)
	{
		int i = lbxFiles.selectedIndex;
		if (i < 0) return;
		auto n = lbxFiles.items.length;
		auto it = cast(FileItem) lbxFiles.items[i];
		auto prev = i > 0 ? cast(FileItem) lbxFiles.items[i-1] : null;
		auto next = i < n - 1 ? cast(FileItem) lbxFiles.items[i+1] : null;
		string prevFile = prev ? prev.fullname : null;
		string nextFile = next ? next.fullname : null;
		showImage( imgProc.FileSelected(prevFile, it.fullname, nextFile) );
		int top = lbxFiles.topIndex;
		if (i > 0 && i == top) lbxFiles.topIndex = top - 1;
		else
		if (i == top + 4 && top + 5 < n) lbxFiles.topIndex = top + 1;
	}

	void showImage(Image img)
	{
		if (img is null) {
			picBox.image = null;
			return;
		}
		int w0 = img.width, h0 = img.height, w, h, SX=1100, SY=670;
		limitSize(w0, h0, SX, SY, w, h);
		picBox.image = img;
		picBox.bounds = dfl.all.Rect(196+SX/2-w/2, 40+SY/2-h/2, w, h);		
		picBox.invalidate(true);
	}

	private void onSave(Control sender, EventArgs ea)
	{
		string fname = txtOutFile.text;
		string orgname;
		if (imgProc.SaveCurrent(fname, orgname)) {
			saved[orgname] = true;
			auto dot = fname.lastIndexOf('.');			
			txtOutFile.text = succ(fname[0..dot]) ~ ".jpg";
			lbxFiles.invalidate(true);
		} else
			msgBox("save failed, sorry");		
	}

	private void drawItem(Object sender, DrawItemEventArgs ea)
	{
		ea.drawBackground();
		//ea.graphics.drawIcon(f.icon, ea.bounds.x + 2, ea.bounds.y + 2);

		FileItem it = cast(FileItem)lbxFiles.items[ea.index];
		Bitmap bmp = imgProc.GetThumb(it.fullname);
		if (bmp) {
			int w = bmp.width, h = bmp.height;
			bmp.draw(ea.graphics, Point(ea.bounds.x + 80-w/2, ea.bounds.y + 65-h/2));
		}

		if (it.fullname in saved) {
			scope Pen pen = new Pen(Color.fromRgb(0xFF00), 2);
			ea.graphics.drawRectangle(pen, Rect(ea.bounds.x + 2, ea.bounds.y + 2, ea.bounds.width - 4, ea.bounds.height-4));
		}

		ea.graphics.drawText(lbxFiles.items[ea.index].toString(), ea.font, ea.foreColor,
							 Rect(ea.bounds.x + 10, ea.bounds.y + 10, ea.bounds.width - 10, 20));
		ea.drawFocusRectangle();
	};

	void OnClose(Form f, EventArgs ea)
	{
		imgProc.Stop();
	}

	void onGotThumb(string fname)
	{
		foreach(i; 0..lbxFiles.items.length) {
			auto it = cast(FileItem) lbxFiles.items[i];
			if (it.fullname == fname) {
				int di = i - lbxFiles.topIndex;
				if (di >= 0 && di < 6)
					lbxFiles.invalidate(true);
				return;
			}
		}		
	}

	void OnKey(Control c, KeyPressEventArgs k)
	{
		switch(k.keyChar()) {
			case 'g': onSave(null, null); break;
			case 'l': if (imgProc.TurnLeft())  showImage(imgProc.current); break;
			case 'r': if (imgProc.TurnRight()) showImage(imgProc.current); break;
			case 'z': onZoom(null, null); break;
			default : 
		}		
	}

	void OnOutSizeChange(Control c, EventArgs k)
	{
		try { 
			int w = to!int(txtWidth.text);
			int h = to!int(txtHeight.text);
			version(verbose) writeln("new target size: ",w, "x",h);
			if (w > 0 && h > 0) {
				ImageProcessor.maxOutX = w;
				ImageProcessor.maxOutY = h;
			}
		} catch(ConvException ex) { }
	}

	private void onZoom(Control sender, EventArgs ea)
	{
		if (picBox.sizeMode == PictureBoxSizeMode.STRETCH_IMAGE)
			picBox.sizeMode = PictureBoxSizeMode.CENTER_IMAGE;
		else
			picBox.sizeMode = PictureBoxSizeMode.STRETCH_IMAGE;
	}
	
	ImageProcessor imgProc;
	bool[string] saved;
}
